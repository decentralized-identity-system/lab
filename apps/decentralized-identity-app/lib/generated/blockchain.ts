// Generated by @wagmi/cli@1.1.0 on 8/26/2023 at 10:56:36 AM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Identifier
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const identifierABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_recovery', internalType: 'address', type: 'address' },
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '__urls', internalType: 'string[]', type: 'string[]' },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'urls', internalType: 'string[]', type: 'string[]' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'callbackFunction', internalType: 'bytes4', type: 'bytes4' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'OffchainLookup',
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }], name: 'AddedOwner' },
  { type: 'event', anonymous: false, inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }], name: 'RemovedOwner' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'addOwner',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'did', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'response', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'document',
    outputs: [{ name: 'DID', internalType: 'string', type: 'string' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'getEntrypoint', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'owner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'currentOwner', internalType: 'address', type: 'address' },
      { name: 'newOwner', internalType: 'address', type: 'address' },
    ],
    name: 'recover',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'recovery', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '__urls', internalType: 'string[]', type: 'string[]' }],
    name: 'setUrls',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'urls', outputs: [{ name: '', internalType: 'string[]', type: 'string[]' }] },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OwnerManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownerManagerABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_recovery', internalType: 'address', type: 'address' },
      { name: '_owner', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }], name: 'AddedOwner' },
  { type: 'event', anonymous: false, inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }], name: 'RemovedOwner' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'addOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'owner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'currentOwner', internalType: 'address', type: 'address' },
      { name: 'newOwner', internalType: 'address', type: 'address' },
    ],
    name: 'recover',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'recovery', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeOwner',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PKI
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pkiABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_entry', internalType: 'address', type: 'address' },
      { name: '_urls', internalType: 'string[]', type: 'string[]' },
    ],
  },
  { type: 'error', inputs: [], name: 'InvalidOperation' },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'urls', internalType: 'string[]', type: 'string[]' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'callbackFunction', internalType: 'bytes4', type: 'bytes4' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'OffchainLookup',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'recovery', internalType: 'address', type: 'address' },
      { name: 'walletOwner', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'computeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recovery', internalType: 'address', type: 'address' },
      { name: 'walletOwner', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deployWallet',
    outputs: [{ name: '', internalType: 'contract Wallet', type: 'address' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [{ name: 'id', internalType: 'string', type: 'string' }], name: 'did', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'response', internalType: 'bytes', type: 'bytes' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'document',
    outputs: [{ name: 'DID', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'isWallet',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'response', internalType: 'bytes', type: 'bytes' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'resolve',
    outputs: [{ name: 'DID', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'urls',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'walletExists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Recovery
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const recoveryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_semaphore', internalType: 'address', type: 'address' },
      { name: '_groupId', internalType: 'uint256', type: 'uint256' },
    ],
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256', indexed: false }], name: 'GroupCreated' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'GuardianAdded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'wallet', internalType: 'address', type: 'address' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addGuardian',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'pki', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
      { name: 'ownerSignture', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'addGuardianFromCounterfactualWallet',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'wallet', internalType: 'address', type: 'address' }],
    name: 'createGuardianGroup',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'pki', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'uint256', type: 'uint256' },
      { name: 'ownerSignture', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'createGuardianGroupFromCounterfactualWallet',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'groupId', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'isWallet',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'identityCommitment', internalType: 'uint256', type: 'uint256' }],
    name: 'joinGroup',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256' },
      { name: 'signal', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
      { name: 'wallet', internalType: 'contract Wallet', type: 'address' },
      { name: 'oldOwner', internalType: 'address', type: 'address' },
      { name: 'newOwner', internalType: 'address', type: 'address' },
    ],
    name: 'recoverWallet',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'semaphore',
    outputs: [{ name: '', internalType: 'contract ISemaphore', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Shared
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const sharedABI = [
  { stateMutability: 'view', type: 'function', inputs: [], name: 'getEntrypoint', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Wallet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const walletABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_entry', internalType: 'address', type: 'address' },
      { name: '_pki', internalType: 'address', type: 'address' },
      { name: '_recovery', internalType: 'address', type: 'address' },
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '__urls', internalType: 'string[]', type: 'string[]' },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'urls', internalType: 'string[]', type: 'string[]' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'callbackFunction', internalType: 'bytes4', type: 'bytes4' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'OffchainLookup',
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }], name: 'AddedOwner' },
  { type: 'event', anonymous: false, inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }], name: 'RemovedOwner' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'addOwner',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'did', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'response', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'document',
    outputs: [{ name: 'DID', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'dest', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'func', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'execute',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'getEntrypoint', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'owner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'currentOwner', internalType: 'address', type: 'address' },
      { name: 'newOwner', internalType: 'address', type: 'address' },
    ],
    name: 'recover',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'recovery', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'removeOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_entry', internalType: 'address', type: 'address' }],
    name: 'setEntry',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '__urls', internalType: 'string[]', type: 'string[]' }],
    name: 'setUrls',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'urls', outputs: [{ name: '', internalType: 'string[]', type: 'string[]' }] },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Semaphore
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const semaphoreABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: '_verifier', internalType: 'contract ISemaphoreVerifier', type: 'address' }],
  },
  { type: 'error', inputs: [], name: 'Semaphore__CallerIsNotTheGroupAdmin' },
  { type: 'error', inputs: [], name: 'Semaphore__GroupAlreadyExists' },
  { type: 'error', inputs: [], name: 'Semaphore__GroupDoesNotExist' },
  { type: 'error', inputs: [], name: 'Semaphore__MerkleTreeDepthIsNotSupported' },
  { type: 'error', inputs: [], name: 'Semaphore__MerkleTreeRootIsExpired' },
  { type: 'error', inputs: [], name: 'Semaphore__MerkleTreeRootIsNotPartOfTheGroup' },
  { type: 'error', inputs: [], name: 'Semaphore__YouAreUsingTheSameNillifierTwice' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'oldAdmin', internalType: 'address', type: 'address', indexed: true },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'GroupAdminUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'merkleTreeDepth', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'zeroValue', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'GroupCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'oldMerkleTreeDuration', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newMerkleTreeDuration', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'GroupMerkleTreeDurationUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'index', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'MemberAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'index', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'MemberRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'index', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newIdentityCommitment', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'MemberUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'externalNullifier', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'signal', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProofVerified',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitments', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'addMembers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleTreeDepth', internalType: 'uint256', type: 'uint256' },
      { name: 'admin', internalType: 'address', type: 'address' },
      { name: 'merkleTreeDuration', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createGroup',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleTreeDepth', internalType: 'uint256', type: 'uint256' },
      { name: 'admin', internalType: 'address', type: 'address' },
    ],
    name: 'createGroup',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeDepth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeRoot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getNumberOfMerkleTreeLeaves',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'groups',
    outputs: [
      { name: 'admin', internalType: 'address', type: 'address' },
      { name: 'merkleTreeDuration', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
      { name: 'proofSiblings', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'proofPathIndices', internalType: 'uint8[]', type: 'uint8[]' },
    ],
    name: 'removeMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'newAdmin', internalType: 'address', type: 'address' },
    ],
    name: 'updateGroupAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'newMerkleTreeDuration', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateGroupMerkleTreeDuration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
      { name: 'newIdentityCommitment', internalType: 'uint256', type: 'uint256' },
      { name: 'proofSiblings', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'proofPathIndices', internalType: 'uint8[]', type: 'uint8[]' },
    ],
    name: 'updateMember',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'verifier',
    outputs: [{ name: '', internalType: 'contract ISemaphoreVerifier', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256' },
      { name: 'signal', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'externalNullifier', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
    ],
    name: 'verifyProof',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PoseidonT3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const poseidonT3ABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256[2]', type: 'uint256[2]' }],
    name: 'poseidon',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PoseidonT6
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const poseidonT6ABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256[5]', type: 'uint256[5]' }],
    name: 'poseidon',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IWalletFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iWalletFactoryABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'recovery', internalType: 'address', type: 'address' },
      { name: 'walletOwner', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'computeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recovery', internalType: 'address', type: 'address' },
      { name: 'walletOwner', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deployWallet',
    outputs: [{ name: '', internalType: 'contract Wallet', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Template
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const templateABI = [{ stateMutability: 'nonpayable', type: 'constructor', inputs: [] }] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Pairing
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pairingABI = [
  { type: 'error', inputs: [], name: 'InvalidProof' },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'P1',
    outputs: [
      {
        name: '',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'P2',
    outputs: [
      {
        name: '',
        internalType: 'struct Pairing.G2Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256[2]', type: 'uint256[2]' },
          { name: 'Y', internalType: 'uint256[2]', type: 'uint256[2]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'p1',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'p2',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'addition',
    outputs: [
      {
        name: 'r',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'p',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'negate',
    outputs: [
      {
        name: 'r',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'p1',
        internalType: 'struct Pairing.G1Point[]',
        type: 'tuple[]',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'p2',
        internalType: 'struct Pairing.G2Point[]',
        type: 'tuple[]',
        components: [
          { name: 'X', internalType: 'uint256[2]', type: 'uint256[2]' },
          { name: 'Y', internalType: 'uint256[2]', type: 'uint256[2]' },
        ],
      },
    ],
    name: 'pairingCheck',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'p',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 's', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'scalar_mul',
    outputs: [
      {
        name: 'r',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SemaphoreGroups
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const semaphoreGroupsABI = [
  { type: 'error', inputs: [], name: 'Semaphore__GroupAlreadyExists' },
  { type: 'error', inputs: [], name: 'Semaphore__GroupDoesNotExist' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'merkleTreeDepth', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'zeroValue', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'GroupCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'index', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'MemberAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'index', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'MemberRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'index', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newIdentityCommitment', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'MemberUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeDepth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeRoot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getNumberOfMerkleTreeLeaves',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SemaphoreVerifier
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const semaphoreVerifierABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'signal', internalType: 'uint256', type: 'uint256' },
      { name: 'externalNullifier', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
      { name: 'merkleTreeDepth', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'verifyProof',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISemaphore
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSemaphoreABI = [
  { type: 'error', inputs: [], name: 'Semaphore__CallerIsNotTheGroupAdmin' },
  { type: 'error', inputs: [], name: 'Semaphore__MerkleTreeDepthIsNotSupported' },
  { type: 'error', inputs: [], name: 'Semaphore__MerkleTreeRootIsExpired' },
  { type: 'error', inputs: [], name: 'Semaphore__MerkleTreeRootIsNotPartOfTheGroup' },
  { type: 'error', inputs: [], name: 'Semaphore__YouAreUsingTheSameNillifierTwice' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'oldAdmin', internalType: 'address', type: 'address', indexed: true },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'GroupAdminUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'oldMerkleTreeDuration', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newMerkleTreeDuration', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'GroupMerkleTreeDurationUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'externalNullifier', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'signal', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProofVerified',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitments', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'addMembers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'depth', internalType: 'uint256', type: 'uint256' },
      { name: 'admin', internalType: 'address', type: 'address' },
      { name: 'merkleTreeRootDuration', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createGroup',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'depth', internalType: 'uint256', type: 'uint256' },
      { name: 'admin', internalType: 'address', type: 'address' },
    ],
    name: 'createGroup',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
      { name: 'proofSiblings', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'proofPathIndices', internalType: 'uint8[]', type: 'uint8[]' },
    ],
    name: 'removeMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'newAdmin', internalType: 'address', type: 'address' },
    ],
    name: 'updateGroupAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'newMerkleTreeDuration', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateGroupMerkleTreeDuration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
      { name: 'newIdentityCommitment', internalType: 'uint256', type: 'uint256' },
      { name: 'proofSiblings', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'proofPathIndices', internalType: 'uint8[]', type: 'uint8[]' },
    ],
    name: 'updateMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256' },
      { name: 'signal', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'externalNullifier', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
    ],
    name: 'verifyProof',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISemaphoreGroups
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSemaphoreGroupsABI = [
  { type: 'error', inputs: [], name: 'Semaphore__GroupAlreadyExists' },
  { type: 'error', inputs: [], name: 'Semaphore__GroupDoesNotExist' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'merkleTreeDepth', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'zeroValue', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'GroupCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'index', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'MemberAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'index', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'MemberRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'index', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newIdentityCommitment', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'MemberUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeDepth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeRoot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getNumberOfMerkleTreeLeaves',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISemaphoreVerifier
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSemaphoreVerifierABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'signal', internalType: 'uint256', type: 'uint256' },
      { name: 'externalNullifier', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
      { name: 'merkleTreeDepth', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'verifyProof',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link identifierABI}__.
 */
export function useIdentifierRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof identifierABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof identifierABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: identifierABI, ...config } as UseContractReadConfig<typeof identifierABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link identifierABI}__ and `functionName` set to `"did"`.
 */
export function useIdentifierDid<TFunctionName extends 'did', TSelectData = ReadContractResult<typeof identifierABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof identifierABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: identifierABI, functionName: 'did', ...config } as UseContractReadConfig<
    typeof identifierABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link identifierABI}__ and `functionName` set to `"document"`.
 */
export function useIdentifierDocument<TFunctionName extends 'document', TSelectData = ReadContractResult<typeof identifierABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof identifierABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: identifierABI, functionName: 'document', ...config } as UseContractReadConfig<
    typeof identifierABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link identifierABI}__ and `functionName` set to `"getEntrypoint"`.
 */
export function useIdentifierGetEntrypoint<
  TFunctionName extends 'getEntrypoint',
  TSelectData = ReadContractResult<typeof identifierABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof identifierABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: identifierABI, functionName: 'getEntrypoint', ...config } as UseContractReadConfig<
    typeof identifierABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link identifierABI}__ and `functionName` set to `"isOwner"`.
 */
export function useIdentifierIsOwner<TFunctionName extends 'isOwner', TSelectData = ReadContractResult<typeof identifierABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof identifierABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: identifierABI, functionName: 'isOwner', ...config } as UseContractReadConfig<
    typeof identifierABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link identifierABI}__ and `functionName` set to `"owner"`.
 */
export function useIdentifierOwner<TFunctionName extends 'owner', TSelectData = ReadContractResult<typeof identifierABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof identifierABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: identifierABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof identifierABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link identifierABI}__ and `functionName` set to `"recovery"`.
 */
export function useIdentifierRecovery<TFunctionName extends 'recovery', TSelectData = ReadContractResult<typeof identifierABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof identifierABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: identifierABI, functionName: 'recovery', ...config } as UseContractReadConfig<
    typeof identifierABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link identifierABI}__ and `functionName` set to `"urls"`.
 */
export function useIdentifierUrls<TFunctionName extends 'urls', TSelectData = ReadContractResult<typeof identifierABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof identifierABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: identifierABI, functionName: 'urls', ...config } as UseContractReadConfig<
    typeof identifierABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link identifierABI}__.
 */
export function useIdentifierWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof identifierABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof identifierABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof identifierABI, TFunctionName, TMode>({ abi: identifierABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link identifierABI}__ and `functionName` set to `"addOwner"`.
 */
export function useIdentifierAddOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof identifierABI, 'addOwner'>['request']['abi'], 'addOwner', TMode> & {
        functionName?: 'addOwner'
      }
    : UseContractWriteConfig<typeof identifierABI, 'addOwner', TMode> & {
        abi?: never
        functionName?: 'addOwner'
      } = {} as any
) {
  return useContractWrite<typeof identifierABI, 'addOwner', TMode>({ abi: identifierABI, functionName: 'addOwner', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link identifierABI}__ and `functionName` set to `"recover"`.
 */
export function useIdentifierRecover<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof identifierABI, 'recover'>['request']['abi'], 'recover', TMode> & {
        functionName?: 'recover'
      }
    : UseContractWriteConfig<typeof identifierABI, 'recover', TMode> & {
        abi?: never
        functionName?: 'recover'
      } = {} as any
) {
  return useContractWrite<typeof identifierABI, 'recover', TMode>({ abi: identifierABI, functionName: 'recover', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link identifierABI}__ and `functionName` set to `"removeOwner"`.
 */
export function useIdentifierRemoveOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof identifierABI, 'removeOwner'>['request']['abi'], 'removeOwner', TMode> & {
        functionName?: 'removeOwner'
      }
    : UseContractWriteConfig<typeof identifierABI, 'removeOwner', TMode> & {
        abi?: never
        functionName?: 'removeOwner'
      } = {} as any
) {
  return useContractWrite<typeof identifierABI, 'removeOwner', TMode>({ abi: identifierABI, functionName: 'removeOwner', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link identifierABI}__ and `functionName` set to `"setUrls"`.
 */
export function useIdentifierSetUrls<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof identifierABI, 'setUrls'>['request']['abi'], 'setUrls', TMode> & {
        functionName?: 'setUrls'
      }
    : UseContractWriteConfig<typeof identifierABI, 'setUrls', TMode> & {
        abi?: never
        functionName?: 'setUrls'
      } = {} as any
) {
  return useContractWrite<typeof identifierABI, 'setUrls', TMode>({ abi: identifierABI, functionName: 'setUrls', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link identifierABI}__.
 */
export function usePrepareIdentifierWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof identifierABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: identifierABI, ...config } as UsePrepareContractWriteConfig<typeof identifierABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link identifierABI}__ and `functionName` set to `"addOwner"`.
 */
export function usePrepareIdentifierAddOwner(
  config: Omit<UsePrepareContractWriteConfig<typeof identifierABI, 'addOwner'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: identifierABI, functionName: 'addOwner', ...config } as UsePrepareContractWriteConfig<
    typeof identifierABI,
    'addOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link identifierABI}__ and `functionName` set to `"recover"`.
 */
export function usePrepareIdentifierRecover(
  config: Omit<UsePrepareContractWriteConfig<typeof identifierABI, 'recover'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: identifierABI, functionName: 'recover', ...config } as UsePrepareContractWriteConfig<
    typeof identifierABI,
    'recover'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link identifierABI}__ and `functionName` set to `"removeOwner"`.
 */
export function usePrepareIdentifierRemoveOwner(
  config: Omit<UsePrepareContractWriteConfig<typeof identifierABI, 'removeOwner'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: identifierABI, functionName: 'removeOwner', ...config } as UsePrepareContractWriteConfig<
    typeof identifierABI,
    'removeOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link identifierABI}__ and `functionName` set to `"setUrls"`.
 */
export function usePrepareIdentifierSetUrls(
  config: Omit<UsePrepareContractWriteConfig<typeof identifierABI, 'setUrls'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: identifierABI, functionName: 'setUrls', ...config } as UsePrepareContractWriteConfig<
    typeof identifierABI,
    'setUrls'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link identifierABI}__.
 */
export function useIdentifierEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof identifierABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: identifierABI, ...config } as UseContractEventConfig<typeof identifierABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link identifierABI}__ and `eventName` set to `"AddedOwner"`.
 */
export function useIdentifierAddedOwnerEvent(
  config: Omit<UseContractEventConfig<typeof identifierABI, 'AddedOwner'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: identifierABI, eventName: 'AddedOwner', ...config } as UseContractEventConfig<typeof identifierABI, 'AddedOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link identifierABI}__ and `eventName` set to `"RemovedOwner"`.
 */
export function useIdentifierRemovedOwnerEvent(
  config: Omit<UseContractEventConfig<typeof identifierABI, 'RemovedOwner'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: identifierABI, eventName: 'RemovedOwner', ...config } as UseContractEventConfig<
    typeof identifierABI,
    'RemovedOwner'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownerManagerABI}__.
 */
export function useOwnerManagerRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof ownerManagerABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof ownerManagerABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: ownerManagerABI, ...config } as UseContractReadConfig<typeof ownerManagerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"isOwner"`.
 */
export function useOwnerManagerIsOwner<TFunctionName extends 'isOwner', TSelectData = ReadContractResult<typeof ownerManagerABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof ownerManagerABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ownerManagerABI, functionName: 'isOwner', ...config } as UseContractReadConfig<
    typeof ownerManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnerManagerOwner<TFunctionName extends 'owner', TSelectData = ReadContractResult<typeof ownerManagerABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof ownerManagerABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ownerManagerABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof ownerManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"recovery"`.
 */
export function useOwnerManagerRecovery<TFunctionName extends 'recovery', TSelectData = ReadContractResult<typeof ownerManagerABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof ownerManagerABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ownerManagerABI, functionName: 'recovery', ...config } as UseContractReadConfig<
    typeof ownerManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownerManagerABI}__.
 */
export function useOwnerManagerWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof ownerManagerABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof ownerManagerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof ownerManagerABI, TFunctionName, TMode>({ abi: ownerManagerABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"addOwner"`.
 */
export function useOwnerManagerAddOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof ownerManagerABI, 'addOwner'>['request']['abi'], 'addOwner', TMode> & {
        functionName?: 'addOwner'
      }
    : UseContractWriteConfig<typeof ownerManagerABI, 'addOwner', TMode> & {
        abi?: never
        functionName?: 'addOwner'
      } = {} as any
) {
  return useContractWrite<typeof ownerManagerABI, 'addOwner', TMode>({ abi: ownerManagerABI, functionName: 'addOwner', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"recover"`.
 */
export function useOwnerManagerRecover<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof ownerManagerABI, 'recover'>['request']['abi'], 'recover', TMode> & {
        functionName?: 'recover'
      }
    : UseContractWriteConfig<typeof ownerManagerABI, 'recover', TMode> & {
        abi?: never
        functionName?: 'recover'
      } = {} as any
) {
  return useContractWrite<typeof ownerManagerABI, 'recover', TMode>({ abi: ownerManagerABI, functionName: 'recover', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"removeOwner"`.
 */
export function useOwnerManagerRemoveOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof ownerManagerABI, 'removeOwner'>['request']['abi'], 'removeOwner', TMode> & {
        functionName?: 'removeOwner'
      }
    : UseContractWriteConfig<typeof ownerManagerABI, 'removeOwner', TMode> & {
        abi?: never
        functionName?: 'removeOwner'
      } = {} as any
) {
  return useContractWrite<typeof ownerManagerABI, 'removeOwner', TMode>({ abi: ownerManagerABI, functionName: 'removeOwner', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownerManagerABI}__.
 */
export function usePrepareOwnerManagerWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ownerManagerABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownerManagerABI, ...config } as UsePrepareContractWriteConfig<typeof ownerManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"addOwner"`.
 */
export function usePrepareOwnerManagerAddOwner(
  config: Omit<UsePrepareContractWriteConfig<typeof ownerManagerABI, 'addOwner'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownerManagerABI, functionName: 'addOwner', ...config } as UsePrepareContractWriteConfig<
    typeof ownerManagerABI,
    'addOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"recover"`.
 */
export function usePrepareOwnerManagerRecover(
  config: Omit<UsePrepareContractWriteConfig<typeof ownerManagerABI, 'recover'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownerManagerABI, functionName: 'recover', ...config } as UsePrepareContractWriteConfig<
    typeof ownerManagerABI,
    'recover'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"removeOwner"`.
 */
export function usePrepareOwnerManagerRemoveOwner(
  config: Omit<UsePrepareContractWriteConfig<typeof ownerManagerABI, 'removeOwner'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownerManagerABI, functionName: 'removeOwner', ...config } as UsePrepareContractWriteConfig<
    typeof ownerManagerABI,
    'removeOwner'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownerManagerABI}__.
 */
export function useOwnerManagerEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ownerManagerABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ownerManagerABI, ...config } as UseContractEventConfig<typeof ownerManagerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownerManagerABI}__ and `eventName` set to `"AddedOwner"`.
 */
export function useOwnerManagerAddedOwnerEvent(
  config: Omit<UseContractEventConfig<typeof ownerManagerABI, 'AddedOwner'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ownerManagerABI, eventName: 'AddedOwner', ...config } as UseContractEventConfig<
    typeof ownerManagerABI,
    'AddedOwner'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownerManagerABI}__ and `eventName` set to `"RemovedOwner"`.
 */
export function useOwnerManagerRemovedOwnerEvent(
  config: Omit<UseContractEventConfig<typeof ownerManagerABI, 'RemovedOwner'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ownerManagerABI, eventName: 'RemovedOwner', ...config } as UseContractEventConfig<
    typeof ownerManagerABI,
    'RemovedOwner'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pkiABI}__.
 */
export function usePkiRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof pkiABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof pkiABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: pkiABI, ...config } as UseContractReadConfig<typeof pkiABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pkiABI}__ and `functionName` set to `"computeAddress"`.
 */
export function usePkiComputeAddress<TFunctionName extends 'computeAddress', TSelectData = ReadContractResult<typeof pkiABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof pkiABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: pkiABI, functionName: 'computeAddress', ...config } as UseContractReadConfig<
    typeof pkiABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pkiABI}__ and `functionName` set to `"did"`.
 */
export function usePkiDid<TFunctionName extends 'did', TSelectData = ReadContractResult<typeof pkiABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof pkiABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: pkiABI, functionName: 'did', ...config } as UseContractReadConfig<typeof pkiABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pkiABI}__ and `functionName` set to `"document"`.
 */
export function usePkiDocument<TFunctionName extends 'document', TSelectData = ReadContractResult<typeof pkiABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof pkiABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: pkiABI, functionName: 'document', ...config } as UseContractReadConfig<typeof pkiABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pkiABI}__ and `functionName` set to `"isWallet"`.
 */
export function usePkiIsWallet<TFunctionName extends 'isWallet', TSelectData = ReadContractResult<typeof pkiABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof pkiABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: pkiABI, functionName: 'isWallet', ...config } as UseContractReadConfig<typeof pkiABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pkiABI}__ and `functionName` set to `"resolve"`.
 */
export function usePkiResolve<TFunctionName extends 'resolve', TSelectData = ReadContractResult<typeof pkiABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof pkiABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: pkiABI, functionName: 'resolve', ...config } as UseContractReadConfig<typeof pkiABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pkiABI}__ and `functionName` set to `"urls"`.
 */
export function usePkiUrls<TFunctionName extends 'urls', TSelectData = ReadContractResult<typeof pkiABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof pkiABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: pkiABI, functionName: 'urls', ...config } as UseContractReadConfig<typeof pkiABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pkiABI}__ and `functionName` set to `"walletExists"`.
 */
export function usePkiWalletExists<TFunctionName extends 'walletExists', TSelectData = ReadContractResult<typeof pkiABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof pkiABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: pkiABI, functionName: 'walletExists', ...config } as UseContractReadConfig<typeof pkiABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pkiABI}__.
 */
export function usePkiWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof pkiABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof pkiABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof pkiABI, TFunctionName, TMode>({ abi: pkiABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pkiABI}__ and `functionName` set to `"deployWallet"`.
 */
export function usePkiDeployWallet<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof pkiABI, 'deployWallet'>['request']['abi'], 'deployWallet', TMode> & {
        functionName?: 'deployWallet'
      }
    : UseContractWriteConfig<typeof pkiABI, 'deployWallet', TMode> & {
        abi?: never
        functionName?: 'deployWallet'
      } = {} as any
) {
  return useContractWrite<typeof pkiABI, 'deployWallet', TMode>({ abi: pkiABI, functionName: 'deployWallet', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pkiABI}__.
 */
export function usePreparePkiWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof pkiABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: pkiABI, ...config } as UsePrepareContractWriteConfig<typeof pkiABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pkiABI}__ and `functionName` set to `"deployWallet"`.
 */
export function usePreparePkiDeployWallet(
  config: Omit<UsePrepareContractWriteConfig<typeof pkiABI, 'deployWallet'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: pkiABI, functionName: 'deployWallet', ...config } as UsePrepareContractWriteConfig<
    typeof pkiABI,
    'deployWallet'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryABI}__.
 */
export function useRecoveryRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof recoveryABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof recoveryABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: recoveryABI, ...config } as UseContractReadConfig<typeof recoveryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"groupId"`.
 */
export function useRecoveryGroupId<TFunctionName extends 'groupId', TSelectData = ReadContractResult<typeof recoveryABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof recoveryABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: recoveryABI, functionName: 'groupId', ...config } as UseContractReadConfig<
    typeof recoveryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"isWallet"`.
 */
export function useRecoveryIsWallet<TFunctionName extends 'isWallet', TSelectData = ReadContractResult<typeof recoveryABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof recoveryABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: recoveryABI, functionName: 'isWallet', ...config } as UseContractReadConfig<
    typeof recoveryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"semaphore"`.
 */
export function useRecoverySemaphore<TFunctionName extends 'semaphore', TSelectData = ReadContractResult<typeof recoveryABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof recoveryABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: recoveryABI, functionName: 'semaphore', ...config } as UseContractReadConfig<
    typeof recoveryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link recoveryABI}__.
 */
export function useRecoveryWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof recoveryABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof recoveryABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof recoveryABI, TFunctionName, TMode>({ abi: recoveryABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"addGuardian"`.
 */
export function useRecoveryAddGuardian<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof recoveryABI, 'addGuardian'>['request']['abi'], 'addGuardian', TMode> & {
        functionName?: 'addGuardian'
      }
    : UseContractWriteConfig<typeof recoveryABI, 'addGuardian', TMode> & {
        abi?: never
        functionName?: 'addGuardian'
      } = {} as any
) {
  return useContractWrite<typeof recoveryABI, 'addGuardian', TMode>({ abi: recoveryABI, functionName: 'addGuardian', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"addGuardianFromCounterfactualWallet"`.
 */
export function useRecoveryAddGuardianFromCounterfactualWallet<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof recoveryABI, 'addGuardianFromCounterfactualWallet'>['request']['abi'],
        'addGuardianFromCounterfactualWallet',
        TMode
      > & { functionName?: 'addGuardianFromCounterfactualWallet' }
    : UseContractWriteConfig<typeof recoveryABI, 'addGuardianFromCounterfactualWallet', TMode> & {
        abi?: never
        functionName?: 'addGuardianFromCounterfactualWallet'
      } = {} as any
) {
  return useContractWrite<typeof recoveryABI, 'addGuardianFromCounterfactualWallet', TMode>({
    abi: recoveryABI,
    functionName: 'addGuardianFromCounterfactualWallet',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"createGuardianGroup"`.
 */
export function useRecoveryCreateGuardianGroup<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof recoveryABI, 'createGuardianGroup'>['request']['abi'],
        'createGuardianGroup',
        TMode
      > & { functionName?: 'createGuardianGroup' }
    : UseContractWriteConfig<typeof recoveryABI, 'createGuardianGroup', TMode> & {
        abi?: never
        functionName?: 'createGuardianGroup'
      } = {} as any
) {
  return useContractWrite<typeof recoveryABI, 'createGuardianGroup', TMode>({
    abi: recoveryABI,
    functionName: 'createGuardianGroup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"createGuardianGroupFromCounterfactualWallet"`.
 */
export function useRecoveryCreateGuardianGroupFromCounterfactualWallet<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof recoveryABI, 'createGuardianGroupFromCounterfactualWallet'>['request']['abi'],
        'createGuardianGroupFromCounterfactualWallet',
        TMode
      > & { functionName?: 'createGuardianGroupFromCounterfactualWallet' }
    : UseContractWriteConfig<typeof recoveryABI, 'createGuardianGroupFromCounterfactualWallet', TMode> & {
        abi?: never
        functionName?: 'createGuardianGroupFromCounterfactualWallet'
      } = {} as any
) {
  return useContractWrite<typeof recoveryABI, 'createGuardianGroupFromCounterfactualWallet', TMode>({
    abi: recoveryABI,
    functionName: 'createGuardianGroupFromCounterfactualWallet',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"joinGroup"`.
 */
export function useRecoveryJoinGroup<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof recoveryABI, 'joinGroup'>['request']['abi'], 'joinGroup', TMode> & {
        functionName?: 'joinGroup'
      }
    : UseContractWriteConfig<typeof recoveryABI, 'joinGroup', TMode> & {
        abi?: never
        functionName?: 'joinGroup'
      } = {} as any
) {
  return useContractWrite<typeof recoveryABI, 'joinGroup', TMode>({ abi: recoveryABI, functionName: 'joinGroup', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"recoverWallet"`.
 */
export function useRecoveryRecoverWallet<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof recoveryABI, 'recoverWallet'>['request']['abi'], 'recoverWallet', TMode> & {
        functionName?: 'recoverWallet'
      }
    : UseContractWriteConfig<typeof recoveryABI, 'recoverWallet', TMode> & {
        abi?: never
        functionName?: 'recoverWallet'
      } = {} as any
) {
  return useContractWrite<typeof recoveryABI, 'recoverWallet', TMode>({ abi: recoveryABI, functionName: 'recoverWallet', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link recoveryABI}__.
 */
export function usePrepareRecoveryWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof recoveryABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: recoveryABI, ...config } as UsePrepareContractWriteConfig<typeof recoveryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"addGuardian"`.
 */
export function usePrepareRecoveryAddGuardian(
  config: Omit<UsePrepareContractWriteConfig<typeof recoveryABI, 'addGuardian'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: recoveryABI, functionName: 'addGuardian', ...config } as UsePrepareContractWriteConfig<
    typeof recoveryABI,
    'addGuardian'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"addGuardianFromCounterfactualWallet"`.
 */
export function usePrepareRecoveryAddGuardianFromCounterfactualWallet(
  config: Omit<UsePrepareContractWriteConfig<typeof recoveryABI, 'addGuardianFromCounterfactualWallet'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: recoveryABI,
    functionName: 'addGuardianFromCounterfactualWallet',
    ...config,
  } as UsePrepareContractWriteConfig<typeof recoveryABI, 'addGuardianFromCounterfactualWallet'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"createGuardianGroup"`.
 */
export function usePrepareRecoveryCreateGuardianGroup(
  config: Omit<UsePrepareContractWriteConfig<typeof recoveryABI, 'createGuardianGroup'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: recoveryABI, functionName: 'createGuardianGroup', ...config } as UsePrepareContractWriteConfig<
    typeof recoveryABI,
    'createGuardianGroup'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"createGuardianGroupFromCounterfactualWallet"`.
 */
export function usePrepareRecoveryCreateGuardianGroupFromCounterfactualWallet(
  config: Omit<UsePrepareContractWriteConfig<typeof recoveryABI, 'createGuardianGroupFromCounterfactualWallet'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: recoveryABI,
    functionName: 'createGuardianGroupFromCounterfactualWallet',
    ...config,
  } as UsePrepareContractWriteConfig<typeof recoveryABI, 'createGuardianGroupFromCounterfactualWallet'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"joinGroup"`.
 */
export function usePrepareRecoveryJoinGroup(
  config: Omit<UsePrepareContractWriteConfig<typeof recoveryABI, 'joinGroup'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: recoveryABI, functionName: 'joinGroup', ...config } as UsePrepareContractWriteConfig<
    typeof recoveryABI,
    'joinGroup'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"recoverWallet"`.
 */
export function usePrepareRecoveryRecoverWallet(
  config: Omit<UsePrepareContractWriteConfig<typeof recoveryABI, 'recoverWallet'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: recoveryABI, functionName: 'recoverWallet', ...config } as UsePrepareContractWriteConfig<
    typeof recoveryABI,
    'recoverWallet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link recoveryABI}__.
 */
export function useRecoveryEvent<TEventName extends string>(config: Omit<UseContractEventConfig<typeof recoveryABI, TEventName>, 'abi'> = {} as any) {
  return useContractEvent({ abi: recoveryABI, ...config } as UseContractEventConfig<typeof recoveryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link recoveryABI}__ and `eventName` set to `"GroupCreated"`.
 */
export function useRecoveryGroupCreatedEvent(
  config: Omit<UseContractEventConfig<typeof recoveryABI, 'GroupCreated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: recoveryABI, eventName: 'GroupCreated', ...config } as UseContractEventConfig<typeof recoveryABI, 'GroupCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link recoveryABI}__ and `eventName` set to `"GuardianAdded"`.
 */
export function useRecoveryGuardianAddedEvent(
  config: Omit<UseContractEventConfig<typeof recoveryABI, 'GuardianAdded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: recoveryABI, eventName: 'GuardianAdded', ...config } as UseContractEventConfig<typeof recoveryABI, 'GuardianAdded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharedABI}__.
 */
export function useSharedRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof sharedABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof sharedABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: sharedABI, ...config } as UseContractReadConfig<typeof sharedABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sharedABI}__ and `functionName` set to `"getEntrypoint"`.
 */
export function useSharedGetEntrypoint<TFunctionName extends 'getEntrypoint', TSelectData = ReadContractResult<typeof sharedABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof sharedABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: sharedABI, functionName: 'getEntrypoint', ...config } as UseContractReadConfig<
    typeof sharedABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link walletABI}__.
 */
export function useWalletRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof walletABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof walletABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: walletABI, ...config } as UseContractReadConfig<typeof walletABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link walletABI}__ and `functionName` set to `"did"`.
 */
export function useWalletDid<TFunctionName extends 'did', TSelectData = ReadContractResult<typeof walletABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof walletABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: walletABI, functionName: 'did', ...config } as UseContractReadConfig<typeof walletABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link walletABI}__ and `functionName` set to `"document"`.
 */
export function useWalletDocument<TFunctionName extends 'document', TSelectData = ReadContractResult<typeof walletABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof walletABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: walletABI, functionName: 'document', ...config } as UseContractReadConfig<
    typeof walletABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link walletABI}__ and `functionName` set to `"getEntrypoint"`.
 */
export function useWalletGetEntrypoint<TFunctionName extends 'getEntrypoint', TSelectData = ReadContractResult<typeof walletABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof walletABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: walletABI, functionName: 'getEntrypoint', ...config } as UseContractReadConfig<
    typeof walletABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link walletABI}__ and `functionName` set to `"isOwner"`.
 */
export function useWalletIsOwner<TFunctionName extends 'isOwner', TSelectData = ReadContractResult<typeof walletABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof walletABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: walletABI, functionName: 'isOwner', ...config } as UseContractReadConfig<
    typeof walletABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link walletABI}__ and `functionName` set to `"owner"`.
 */
export function useWalletOwner<TFunctionName extends 'owner', TSelectData = ReadContractResult<typeof walletABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof walletABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: walletABI, functionName: 'owner', ...config } as UseContractReadConfig<typeof walletABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link walletABI}__ and `functionName` set to `"recovery"`.
 */
export function useWalletRecovery<TFunctionName extends 'recovery', TSelectData = ReadContractResult<typeof walletABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof walletABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: walletABI, functionName: 'recovery', ...config } as UseContractReadConfig<
    typeof walletABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link walletABI}__ and `functionName` set to `"urls"`.
 */
export function useWalletUrls<TFunctionName extends 'urls', TSelectData = ReadContractResult<typeof walletABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof walletABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: walletABI, functionName: 'urls', ...config } as UseContractReadConfig<typeof walletABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link walletABI}__.
 */
export function useWalletWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof walletABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof walletABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof walletABI, TFunctionName, TMode>({ abi: walletABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link walletABI}__ and `functionName` set to `"addOwner"`.
 */
export function useWalletAddOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof walletABI, 'addOwner'>['request']['abi'], 'addOwner', TMode> & {
        functionName?: 'addOwner'
      }
    : UseContractWriteConfig<typeof walletABI, 'addOwner', TMode> & {
        abi?: never
        functionName?: 'addOwner'
      } = {} as any
) {
  return useContractWrite<typeof walletABI, 'addOwner', TMode>({ abi: walletABI, functionName: 'addOwner', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link walletABI}__ and `functionName` set to `"execute"`.
 */
export function useWalletExecute<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof walletABI, 'execute'>['request']['abi'], 'execute', TMode> & {
        functionName?: 'execute'
      }
    : UseContractWriteConfig<typeof walletABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any
) {
  return useContractWrite<typeof walletABI, 'execute', TMode>({ abi: walletABI, functionName: 'execute', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link walletABI}__ and `functionName` set to `"recover"`.
 */
export function useWalletRecover<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof walletABI, 'recover'>['request']['abi'], 'recover', TMode> & {
        functionName?: 'recover'
      }
    : UseContractWriteConfig<typeof walletABI, 'recover', TMode> & {
        abi?: never
        functionName?: 'recover'
      } = {} as any
) {
  return useContractWrite<typeof walletABI, 'recover', TMode>({ abi: walletABI, functionName: 'recover', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link walletABI}__ and `functionName` set to `"removeOwner"`.
 */
export function useWalletRemoveOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof walletABI, 'removeOwner'>['request']['abi'], 'removeOwner', TMode> & {
        functionName?: 'removeOwner'
      }
    : UseContractWriteConfig<typeof walletABI, 'removeOwner', TMode> & {
        abi?: never
        functionName?: 'removeOwner'
      } = {} as any
) {
  return useContractWrite<typeof walletABI, 'removeOwner', TMode>({ abi: walletABI, functionName: 'removeOwner', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link walletABI}__ and `functionName` set to `"setEntry"`.
 */
export function useWalletSetEntry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof walletABI, 'setEntry'>['request']['abi'], 'setEntry', TMode> & {
        functionName?: 'setEntry'
      }
    : UseContractWriteConfig<typeof walletABI, 'setEntry', TMode> & {
        abi?: never
        functionName?: 'setEntry'
      } = {} as any
) {
  return useContractWrite<typeof walletABI, 'setEntry', TMode>({ abi: walletABI, functionName: 'setEntry', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link walletABI}__ and `functionName` set to `"setUrls"`.
 */
export function useWalletSetUrls<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof walletABI, 'setUrls'>['request']['abi'], 'setUrls', TMode> & {
        functionName?: 'setUrls'
      }
    : UseContractWriteConfig<typeof walletABI, 'setUrls', TMode> & {
        abi?: never
        functionName?: 'setUrls'
      } = {} as any
) {
  return useContractWrite<typeof walletABI, 'setUrls', TMode>({ abi: walletABI, functionName: 'setUrls', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link walletABI}__.
 */
export function usePrepareWalletWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof walletABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: walletABI, ...config } as UsePrepareContractWriteConfig<typeof walletABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link walletABI}__ and `functionName` set to `"addOwner"`.
 */
export function usePrepareWalletAddOwner(
  config: Omit<UsePrepareContractWriteConfig<typeof walletABI, 'addOwner'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: walletABI, functionName: 'addOwner', ...config } as UsePrepareContractWriteConfig<
    typeof walletABI,
    'addOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link walletABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareWalletExecute(
  config: Omit<UsePrepareContractWriteConfig<typeof walletABI, 'execute'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: walletABI, functionName: 'execute', ...config } as UsePrepareContractWriteConfig<typeof walletABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link walletABI}__ and `functionName` set to `"recover"`.
 */
export function usePrepareWalletRecover(
  config: Omit<UsePrepareContractWriteConfig<typeof walletABI, 'recover'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: walletABI, functionName: 'recover', ...config } as UsePrepareContractWriteConfig<typeof walletABI, 'recover'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link walletABI}__ and `functionName` set to `"removeOwner"`.
 */
export function usePrepareWalletRemoveOwner(
  config: Omit<UsePrepareContractWriteConfig<typeof walletABI, 'removeOwner'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: walletABI, functionName: 'removeOwner', ...config } as UsePrepareContractWriteConfig<
    typeof walletABI,
    'removeOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link walletABI}__ and `functionName` set to `"setEntry"`.
 */
export function usePrepareWalletSetEntry(
  config: Omit<UsePrepareContractWriteConfig<typeof walletABI, 'setEntry'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: walletABI, functionName: 'setEntry', ...config } as UsePrepareContractWriteConfig<
    typeof walletABI,
    'setEntry'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link walletABI}__ and `functionName` set to `"setUrls"`.
 */
export function usePrepareWalletSetUrls(
  config: Omit<UsePrepareContractWriteConfig<typeof walletABI, 'setUrls'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: walletABI, functionName: 'setUrls', ...config } as UsePrepareContractWriteConfig<typeof walletABI, 'setUrls'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link walletABI}__.
 */
export function useWalletEvent<TEventName extends string>(config: Omit<UseContractEventConfig<typeof walletABI, TEventName>, 'abi'> = {} as any) {
  return useContractEvent({ abi: walletABI, ...config } as UseContractEventConfig<typeof walletABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link walletABI}__ and `eventName` set to `"AddedOwner"`.
 */
export function useWalletAddedOwnerEvent(config: Omit<UseContractEventConfig<typeof walletABI, 'AddedOwner'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: walletABI, eventName: 'AddedOwner', ...config } as UseContractEventConfig<typeof walletABI, 'AddedOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link walletABI}__ and `eventName` set to `"RemovedOwner"`.
 */
export function useWalletRemovedOwnerEvent(config: Omit<UseContractEventConfig<typeof walletABI, 'RemovedOwner'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: walletABI, eventName: 'RemovedOwner', ...config } as UseContractEventConfig<typeof walletABI, 'RemovedOwner'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreABI}__.
 */
export function useSemaphoreRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof semaphoreABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: semaphoreABI, ...config } as UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"getMerkleTreeDepth"`.
 */
export function useSemaphoreGetMerkleTreeDepth<
  TFunctionName extends 'getMerkleTreeDepth',
  TSelectData = ReadContractResult<typeof semaphoreABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: semaphoreABI, functionName: 'getMerkleTreeDepth', ...config } as UseContractReadConfig<
    typeof semaphoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"getMerkleTreeRoot"`.
 */
export function useSemaphoreGetMerkleTreeRoot<
  TFunctionName extends 'getMerkleTreeRoot',
  TSelectData = ReadContractResult<typeof semaphoreABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: semaphoreABI, functionName: 'getMerkleTreeRoot', ...config } as UseContractReadConfig<
    typeof semaphoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"getNumberOfMerkleTreeLeaves"`.
 */
export function useSemaphoreGetNumberOfMerkleTreeLeaves<
  TFunctionName extends 'getNumberOfMerkleTreeLeaves',
  TSelectData = ReadContractResult<typeof semaphoreABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: semaphoreABI, functionName: 'getNumberOfMerkleTreeLeaves', ...config } as UseContractReadConfig<
    typeof semaphoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"groups"`.
 */
export function useSemaphoreGroups<TFunctionName extends 'groups', TSelectData = ReadContractResult<typeof semaphoreABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: semaphoreABI, functionName: 'groups', ...config } as UseContractReadConfig<
    typeof semaphoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"verifier"`.
 */
export function useSemaphoreVerifier<TFunctionName extends 'verifier', TSelectData = ReadContractResult<typeof semaphoreABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: semaphoreABI, functionName: 'verifier', ...config } as UseContractReadConfig<
    typeof semaphoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__.
 */
export function useSemaphoreWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof semaphoreABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof semaphoreABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof semaphoreABI, TFunctionName, TMode>({ abi: semaphoreABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"addMember"`.
 */
export function useSemaphoreAddMember<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof semaphoreABI, 'addMember'>['request']['abi'], 'addMember', TMode> & {
        functionName?: 'addMember'
      }
    : UseContractWriteConfig<typeof semaphoreABI, 'addMember', TMode> & {
        abi?: never
        functionName?: 'addMember'
      } = {} as any
) {
  return useContractWrite<typeof semaphoreABI, 'addMember', TMode>({ abi: semaphoreABI, functionName: 'addMember', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"addMembers"`.
 */
export function useSemaphoreAddMembers<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof semaphoreABI, 'addMembers'>['request']['abi'], 'addMembers', TMode> & {
        functionName?: 'addMembers'
      }
    : UseContractWriteConfig<typeof semaphoreABI, 'addMembers', TMode> & {
        abi?: never
        functionName?: 'addMembers'
      } = {} as any
) {
  return useContractWrite<typeof semaphoreABI, 'addMembers', TMode>({ abi: semaphoreABI, functionName: 'addMembers', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"createGroup"`.
 */
export function useSemaphoreCreateGroup<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof semaphoreABI, 'createGroup'>['request']['abi'], 'createGroup', TMode> & {
        functionName?: 'createGroup'
      }
    : UseContractWriteConfig<typeof semaphoreABI, 'createGroup', TMode> & {
        abi?: never
        functionName?: 'createGroup'
      } = {} as any
) {
  return useContractWrite<typeof semaphoreABI, 'createGroup', TMode>({ abi: semaphoreABI, functionName: 'createGroup', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"removeMember"`.
 */
export function useSemaphoreRemoveMember<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof semaphoreABI, 'removeMember'>['request']['abi'], 'removeMember', TMode> & {
        functionName?: 'removeMember'
      }
    : UseContractWriteConfig<typeof semaphoreABI, 'removeMember', TMode> & {
        abi?: never
        functionName?: 'removeMember'
      } = {} as any
) {
  return useContractWrite<typeof semaphoreABI, 'removeMember', TMode>({ abi: semaphoreABI, functionName: 'removeMember', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"updateGroupAdmin"`.
 */
export function useSemaphoreUpdateGroupAdmin<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof semaphoreABI, 'updateGroupAdmin'>['request']['abi'], 'updateGroupAdmin', TMode> & {
        functionName?: 'updateGroupAdmin'
      }
    : UseContractWriteConfig<typeof semaphoreABI, 'updateGroupAdmin', TMode> & {
        abi?: never
        functionName?: 'updateGroupAdmin'
      } = {} as any
) {
  return useContractWrite<typeof semaphoreABI, 'updateGroupAdmin', TMode>({ abi: semaphoreABI, functionName: 'updateGroupAdmin', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"updateGroupMerkleTreeDuration"`.
 */
export function useSemaphoreUpdateGroupMerkleTreeDuration<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof semaphoreABI, 'updateGroupMerkleTreeDuration'>['request']['abi'],
        'updateGroupMerkleTreeDuration',
        TMode
      > & { functionName?: 'updateGroupMerkleTreeDuration' }
    : UseContractWriteConfig<typeof semaphoreABI, 'updateGroupMerkleTreeDuration', TMode> & {
        abi?: never
        functionName?: 'updateGroupMerkleTreeDuration'
      } = {} as any
) {
  return useContractWrite<typeof semaphoreABI, 'updateGroupMerkleTreeDuration', TMode>({
    abi: semaphoreABI,
    functionName: 'updateGroupMerkleTreeDuration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"updateMember"`.
 */
export function useSemaphoreUpdateMember<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof semaphoreABI, 'updateMember'>['request']['abi'], 'updateMember', TMode> & {
        functionName?: 'updateMember'
      }
    : UseContractWriteConfig<typeof semaphoreABI, 'updateMember', TMode> & {
        abi?: never
        functionName?: 'updateMember'
      } = {} as any
) {
  return useContractWrite<typeof semaphoreABI, 'updateMember', TMode>({ abi: semaphoreABI, functionName: 'updateMember', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"verifyProof"`.
 */
export function useSemaphoreVerifyProof<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof semaphoreABI, 'verifyProof'>['request']['abi'], 'verifyProof', TMode> & {
        functionName?: 'verifyProof'
      }
    : UseContractWriteConfig<typeof semaphoreABI, 'verifyProof', TMode> & {
        abi?: never
        functionName?: 'verifyProof'
      } = {} as any
) {
  return useContractWrite<typeof semaphoreABI, 'verifyProof', TMode>({ abi: semaphoreABI, functionName: 'verifyProof', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__.
 */
export function usePrepareSemaphoreWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof semaphoreABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: semaphoreABI, ...config } as UsePrepareContractWriteConfig<typeof semaphoreABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"addMember"`.
 */
export function usePrepareSemaphoreAddMember(
  config: Omit<UsePrepareContractWriteConfig<typeof semaphoreABI, 'addMember'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: semaphoreABI, functionName: 'addMember', ...config } as UsePrepareContractWriteConfig<
    typeof semaphoreABI,
    'addMember'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"addMembers"`.
 */
export function usePrepareSemaphoreAddMembers(
  config: Omit<UsePrepareContractWriteConfig<typeof semaphoreABI, 'addMembers'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: semaphoreABI, functionName: 'addMembers', ...config } as UsePrepareContractWriteConfig<
    typeof semaphoreABI,
    'addMembers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"createGroup"`.
 */
export function usePrepareSemaphoreCreateGroup(
  config: Omit<UsePrepareContractWriteConfig<typeof semaphoreABI, 'createGroup'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: semaphoreABI, functionName: 'createGroup', ...config } as UsePrepareContractWriteConfig<
    typeof semaphoreABI,
    'createGroup'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"removeMember"`.
 */
export function usePrepareSemaphoreRemoveMember(
  config: Omit<UsePrepareContractWriteConfig<typeof semaphoreABI, 'removeMember'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: semaphoreABI, functionName: 'removeMember', ...config } as UsePrepareContractWriteConfig<
    typeof semaphoreABI,
    'removeMember'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"updateGroupAdmin"`.
 */
export function usePrepareSemaphoreUpdateGroupAdmin(
  config: Omit<UsePrepareContractWriteConfig<typeof semaphoreABI, 'updateGroupAdmin'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: semaphoreABI, functionName: 'updateGroupAdmin', ...config } as UsePrepareContractWriteConfig<
    typeof semaphoreABI,
    'updateGroupAdmin'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"updateGroupMerkleTreeDuration"`.
 */
export function usePrepareSemaphoreUpdateGroupMerkleTreeDuration(
  config: Omit<UsePrepareContractWriteConfig<typeof semaphoreABI, 'updateGroupMerkleTreeDuration'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: semaphoreABI, functionName: 'updateGroupMerkleTreeDuration', ...config } as UsePrepareContractWriteConfig<
    typeof semaphoreABI,
    'updateGroupMerkleTreeDuration'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"updateMember"`.
 */
export function usePrepareSemaphoreUpdateMember(
  config: Omit<UsePrepareContractWriteConfig<typeof semaphoreABI, 'updateMember'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: semaphoreABI, functionName: 'updateMember', ...config } as UsePrepareContractWriteConfig<
    typeof semaphoreABI,
    'updateMember'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"verifyProof"`.
 */
export function usePrepareSemaphoreVerifyProof(
  config: Omit<UsePrepareContractWriteConfig<typeof semaphoreABI, 'verifyProof'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: semaphoreABI, functionName: 'verifyProof', ...config } as UsePrepareContractWriteConfig<
    typeof semaphoreABI,
    'verifyProof'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__.
 */
export function useSemaphoreEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof semaphoreABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: semaphoreABI, ...config } as UseContractEventConfig<typeof semaphoreABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"GroupAdminUpdated"`.
 */
export function useSemaphoreGroupAdminUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof semaphoreABI, 'GroupAdminUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semaphoreABI, eventName: 'GroupAdminUpdated', ...config } as UseContractEventConfig<
    typeof semaphoreABI,
    'GroupAdminUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"GroupCreated"`.
 */
export function useSemaphoreGroupCreatedEvent(
  config: Omit<UseContractEventConfig<typeof semaphoreABI, 'GroupCreated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semaphoreABI, eventName: 'GroupCreated', ...config } as UseContractEventConfig<typeof semaphoreABI, 'GroupCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"GroupMerkleTreeDurationUpdated"`.
 */
export function useSemaphoreGroupMerkleTreeDurationUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof semaphoreABI, 'GroupMerkleTreeDurationUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semaphoreABI, eventName: 'GroupMerkleTreeDurationUpdated', ...config } as UseContractEventConfig<
    typeof semaphoreABI,
    'GroupMerkleTreeDurationUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"MemberAdded"`.
 */
export function useSemaphoreMemberAddedEvent(
  config: Omit<UseContractEventConfig<typeof semaphoreABI, 'MemberAdded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semaphoreABI, eventName: 'MemberAdded', ...config } as UseContractEventConfig<typeof semaphoreABI, 'MemberAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"MemberRemoved"`.
 */
export function useSemaphoreMemberRemovedEvent(
  config: Omit<UseContractEventConfig<typeof semaphoreABI, 'MemberRemoved'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semaphoreABI, eventName: 'MemberRemoved', ...config } as UseContractEventConfig<
    typeof semaphoreABI,
    'MemberRemoved'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"MemberUpdated"`.
 */
export function useSemaphoreMemberUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof semaphoreABI, 'MemberUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semaphoreABI, eventName: 'MemberUpdated', ...config } as UseContractEventConfig<
    typeof semaphoreABI,
    'MemberUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"ProofVerified"`.
 */
export function useSemaphoreProofVerifiedEvent(
  config: Omit<UseContractEventConfig<typeof semaphoreABI, 'ProofVerified'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semaphoreABI, eventName: 'ProofVerified', ...config } as UseContractEventConfig<
    typeof semaphoreABI,
    'ProofVerified'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonT3ABI}__.
 */
export function usePoseidonT3Read<TFunctionName extends string, TSelectData = ReadContractResult<typeof poseidonT3ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof poseidonT3ABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: poseidonT3ABI, ...config } as UseContractReadConfig<typeof poseidonT3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonT3ABI}__ and `functionName` set to `"poseidon"`.
 */
export function usePoseidonT3Poseidon<TFunctionName extends 'poseidon', TSelectData = ReadContractResult<typeof poseidonT3ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof poseidonT3ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: poseidonT3ABI, functionName: 'poseidon', ...config } as UseContractReadConfig<
    typeof poseidonT3ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonT6ABI}__.
 */
export function usePoseidonT6Read<TFunctionName extends string, TSelectData = ReadContractResult<typeof poseidonT6ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof poseidonT6ABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: poseidonT6ABI, ...config } as UseContractReadConfig<typeof poseidonT6ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonT6ABI}__ and `functionName` set to `"poseidon"`.
 */
export function usePoseidonT6Poseidon<TFunctionName extends 'poseidon', TSelectData = ReadContractResult<typeof poseidonT6ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof poseidonT6ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: poseidonT6ABI, functionName: 'poseidon', ...config } as UseContractReadConfig<
    typeof poseidonT6ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iWalletFactoryABI}__.
 */
export function useIWalletFactoryRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof iWalletFactoryABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof iWalletFactoryABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: iWalletFactoryABI, ...config } as UseContractReadConfig<typeof iWalletFactoryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iWalletFactoryABI}__ and `functionName` set to `"computeAddress"`.
 */
export function useIWalletFactoryComputeAddress<
  TFunctionName extends 'computeAddress',
  TSelectData = ReadContractResult<typeof iWalletFactoryABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iWalletFactoryABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: iWalletFactoryABI, functionName: 'computeAddress', ...config } as UseContractReadConfig<
    typeof iWalletFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iWalletFactoryABI}__.
 */
export function useIWalletFactoryWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iWalletFactoryABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof iWalletFactoryABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof iWalletFactoryABI, TFunctionName, TMode>({ abi: iWalletFactoryABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iWalletFactoryABI}__ and `functionName` set to `"deployWallet"`.
 */
export function useIWalletFactoryDeployWallet<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iWalletFactoryABI, 'deployWallet'>['request']['abi'], 'deployWallet', TMode> & {
        functionName?: 'deployWallet'
      }
    : UseContractWriteConfig<typeof iWalletFactoryABI, 'deployWallet', TMode> & {
        abi?: never
        functionName?: 'deployWallet'
      } = {} as any
) {
  return useContractWrite<typeof iWalletFactoryABI, 'deployWallet', TMode>({ abi: iWalletFactoryABI, functionName: 'deployWallet', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iWalletFactoryABI}__.
 */
export function usePrepareIWalletFactoryWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iWalletFactoryABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: iWalletFactoryABI, ...config } as UsePrepareContractWriteConfig<typeof iWalletFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iWalletFactoryABI}__ and `functionName` set to `"deployWallet"`.
 */
export function usePrepareIWalletFactoryDeployWallet(
  config: Omit<UsePrepareContractWriteConfig<typeof iWalletFactoryABI, 'deployWallet'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iWalletFactoryABI, functionName: 'deployWallet', ...config } as UsePrepareContractWriteConfig<
    typeof iWalletFactoryABI,
    'deployWallet'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairingABI}__.
 */
export function usePairingRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof pairingABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: pairingABI, ...config } as UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairingABI}__ and `functionName` set to `"P1"`.
 */
export function usePairingP1<TFunctionName extends 'P1', TSelectData = ReadContractResult<typeof pairingABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: pairingABI, functionName: 'P1', ...config } as UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairingABI}__ and `functionName` set to `"P2"`.
 */
export function usePairingP2<TFunctionName extends 'P2', TSelectData = ReadContractResult<typeof pairingABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: pairingABI, functionName: 'P2', ...config } as UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairingABI}__ and `functionName` set to `"addition"`.
 */
export function usePairingAddition<TFunctionName extends 'addition', TSelectData = ReadContractResult<typeof pairingABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: pairingABI, functionName: 'addition', ...config } as UseContractReadConfig<
    typeof pairingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairingABI}__ and `functionName` set to `"negate"`.
 */
export function usePairingNegate<TFunctionName extends 'negate', TSelectData = ReadContractResult<typeof pairingABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: pairingABI, functionName: 'negate', ...config } as UseContractReadConfig<
    typeof pairingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairingABI}__ and `functionName` set to `"pairingCheck"`.
 */
export function usePairingPairingCheck<TFunctionName extends 'pairingCheck', TSelectData = ReadContractResult<typeof pairingABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: pairingABI, functionName: 'pairingCheck', ...config } as UseContractReadConfig<
    typeof pairingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairingABI}__ and `functionName` set to `"scalar_mul"`.
 */
export function usePairingScalarMul<TFunctionName extends 'scalar_mul', TSelectData = ReadContractResult<typeof pairingABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: pairingABI, functionName: 'scalar_mul', ...config } as UseContractReadConfig<
    typeof pairingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreGroupsABI}__.
 */
export function useSemaphoreGroupsRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof semaphoreGroupsABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof semaphoreGroupsABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: semaphoreGroupsABI, ...config } as UseContractReadConfig<typeof semaphoreGroupsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreGroupsABI}__ and `functionName` set to `"getMerkleTreeDepth"`.
 */
export function useSemaphoreGroupsGetMerkleTreeDepth<
  TFunctionName extends 'getMerkleTreeDepth',
  TSelectData = ReadContractResult<typeof semaphoreGroupsABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof semaphoreGroupsABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: semaphoreGroupsABI, functionName: 'getMerkleTreeDepth', ...config } as UseContractReadConfig<
    typeof semaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreGroupsABI}__ and `functionName` set to `"getMerkleTreeRoot"`.
 */
export function useSemaphoreGroupsGetMerkleTreeRoot<
  TFunctionName extends 'getMerkleTreeRoot',
  TSelectData = ReadContractResult<typeof semaphoreGroupsABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof semaphoreGroupsABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: semaphoreGroupsABI, functionName: 'getMerkleTreeRoot', ...config } as UseContractReadConfig<
    typeof semaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreGroupsABI}__ and `functionName` set to `"getNumberOfMerkleTreeLeaves"`.
 */
export function useSemaphoreGroupsGetNumberOfMerkleTreeLeaves<
  TFunctionName extends 'getNumberOfMerkleTreeLeaves',
  TSelectData = ReadContractResult<typeof semaphoreGroupsABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof semaphoreGroupsABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: semaphoreGroupsABI, functionName: 'getNumberOfMerkleTreeLeaves', ...config } as UseContractReadConfig<
    typeof semaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreGroupsABI}__.
 */
export function useSemaphoreGroupsEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof semaphoreGroupsABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: semaphoreGroupsABI, ...config } as UseContractEventConfig<typeof semaphoreGroupsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreGroupsABI}__ and `eventName` set to `"GroupCreated"`.
 */
export function useSemaphoreGroupsGroupCreatedEvent(
  config: Omit<UseContractEventConfig<typeof semaphoreGroupsABI, 'GroupCreated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semaphoreGroupsABI, eventName: 'GroupCreated', ...config } as UseContractEventConfig<
    typeof semaphoreGroupsABI,
    'GroupCreated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreGroupsABI}__ and `eventName` set to `"MemberAdded"`.
 */
export function useSemaphoreGroupsMemberAddedEvent(
  config: Omit<UseContractEventConfig<typeof semaphoreGroupsABI, 'MemberAdded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semaphoreGroupsABI, eventName: 'MemberAdded', ...config } as UseContractEventConfig<
    typeof semaphoreGroupsABI,
    'MemberAdded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreGroupsABI}__ and `eventName` set to `"MemberRemoved"`.
 */
export function useSemaphoreGroupsMemberRemovedEvent(
  config: Omit<UseContractEventConfig<typeof semaphoreGroupsABI, 'MemberRemoved'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semaphoreGroupsABI, eventName: 'MemberRemoved', ...config } as UseContractEventConfig<
    typeof semaphoreGroupsABI,
    'MemberRemoved'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreGroupsABI}__ and `eventName` set to `"MemberUpdated"`.
 */
export function useSemaphoreGroupsMemberUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof semaphoreGroupsABI, 'MemberUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semaphoreGroupsABI, eventName: 'MemberUpdated', ...config } as UseContractEventConfig<
    typeof semaphoreGroupsABI,
    'MemberUpdated'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreVerifierABI}__.
 */
export function useSemaphoreVerifierRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof semaphoreVerifierABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof semaphoreVerifierABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: semaphoreVerifierABI, ...config } as UseContractReadConfig<typeof semaphoreVerifierABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreVerifierABI}__ and `functionName` set to `"verifyProof"`.
 */
export function useSemaphoreVerifierVerifyProof<
  TFunctionName extends 'verifyProof',
  TSelectData = ReadContractResult<typeof semaphoreVerifierABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof semaphoreVerifierABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: semaphoreVerifierABI, functionName: 'verifyProof', ...config } as UseContractReadConfig<
    typeof semaphoreVerifierABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__.
 */
export function useISemaphoreWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iSemaphoreABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof iSemaphoreABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof iSemaphoreABI, TFunctionName, TMode>({ abi: iSemaphoreABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"addMember"`.
 */
export function useISemaphoreAddMember<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iSemaphoreABI, 'addMember'>['request']['abi'], 'addMember', TMode> & {
        functionName?: 'addMember'
      }
    : UseContractWriteConfig<typeof iSemaphoreABI, 'addMember', TMode> & {
        abi?: never
        functionName?: 'addMember'
      } = {} as any
) {
  return useContractWrite<typeof iSemaphoreABI, 'addMember', TMode>({ abi: iSemaphoreABI, functionName: 'addMember', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"addMembers"`.
 */
export function useISemaphoreAddMembers<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iSemaphoreABI, 'addMembers'>['request']['abi'], 'addMembers', TMode> & {
        functionName?: 'addMembers'
      }
    : UseContractWriteConfig<typeof iSemaphoreABI, 'addMembers', TMode> & {
        abi?: never
        functionName?: 'addMembers'
      } = {} as any
) {
  return useContractWrite<typeof iSemaphoreABI, 'addMembers', TMode>({ abi: iSemaphoreABI, functionName: 'addMembers', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"createGroup"`.
 */
export function useISemaphoreCreateGroup<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iSemaphoreABI, 'createGroup'>['request']['abi'], 'createGroup', TMode> & {
        functionName?: 'createGroup'
      }
    : UseContractWriteConfig<typeof iSemaphoreABI, 'createGroup', TMode> & {
        abi?: never
        functionName?: 'createGroup'
      } = {} as any
) {
  return useContractWrite<typeof iSemaphoreABI, 'createGroup', TMode>({ abi: iSemaphoreABI, functionName: 'createGroup', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"removeMember"`.
 */
export function useISemaphoreRemoveMember<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iSemaphoreABI, 'removeMember'>['request']['abi'], 'removeMember', TMode> & {
        functionName?: 'removeMember'
      }
    : UseContractWriteConfig<typeof iSemaphoreABI, 'removeMember', TMode> & {
        abi?: never
        functionName?: 'removeMember'
      } = {} as any
) {
  return useContractWrite<typeof iSemaphoreABI, 'removeMember', TMode>({ abi: iSemaphoreABI, functionName: 'removeMember', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"updateGroupAdmin"`.
 */
export function useISemaphoreUpdateGroupAdmin<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iSemaphoreABI, 'updateGroupAdmin'>['request']['abi'], 'updateGroupAdmin', TMode> & {
        functionName?: 'updateGroupAdmin'
      }
    : UseContractWriteConfig<typeof iSemaphoreABI, 'updateGroupAdmin', TMode> & {
        abi?: never
        functionName?: 'updateGroupAdmin'
      } = {} as any
) {
  return useContractWrite<typeof iSemaphoreABI, 'updateGroupAdmin', TMode>({ abi: iSemaphoreABI, functionName: 'updateGroupAdmin', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"updateGroupMerkleTreeDuration"`.
 */
export function useISemaphoreUpdateGroupMerkleTreeDuration<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iSemaphoreABI, 'updateGroupMerkleTreeDuration'>['request']['abi'],
        'updateGroupMerkleTreeDuration',
        TMode
      > & { functionName?: 'updateGroupMerkleTreeDuration' }
    : UseContractWriteConfig<typeof iSemaphoreABI, 'updateGroupMerkleTreeDuration', TMode> & {
        abi?: never
        functionName?: 'updateGroupMerkleTreeDuration'
      } = {} as any
) {
  return useContractWrite<typeof iSemaphoreABI, 'updateGroupMerkleTreeDuration', TMode>({
    abi: iSemaphoreABI,
    functionName: 'updateGroupMerkleTreeDuration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"updateMember"`.
 */
export function useISemaphoreUpdateMember<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iSemaphoreABI, 'updateMember'>['request']['abi'], 'updateMember', TMode> & {
        functionName?: 'updateMember'
      }
    : UseContractWriteConfig<typeof iSemaphoreABI, 'updateMember', TMode> & {
        abi?: never
        functionName?: 'updateMember'
      } = {} as any
) {
  return useContractWrite<typeof iSemaphoreABI, 'updateMember', TMode>({ abi: iSemaphoreABI, functionName: 'updateMember', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"verifyProof"`.
 */
export function useISemaphoreVerifyProof<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iSemaphoreABI, 'verifyProof'>['request']['abi'], 'verifyProof', TMode> & {
        functionName?: 'verifyProof'
      }
    : UseContractWriteConfig<typeof iSemaphoreABI, 'verifyProof', TMode> & {
        abi?: never
        functionName?: 'verifyProof'
      } = {} as any
) {
  return useContractWrite<typeof iSemaphoreABI, 'verifyProof', TMode>({ abi: iSemaphoreABI, functionName: 'verifyProof', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__.
 */
export function usePrepareISemaphoreWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iSemaphoreABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: iSemaphoreABI, ...config } as UsePrepareContractWriteConfig<typeof iSemaphoreABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"addMember"`.
 */
export function usePrepareISemaphoreAddMember(
  config: Omit<UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'addMember'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iSemaphoreABI, functionName: 'addMember', ...config } as UsePrepareContractWriteConfig<
    typeof iSemaphoreABI,
    'addMember'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"addMembers"`.
 */
export function usePrepareISemaphoreAddMembers(
  config: Omit<UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'addMembers'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iSemaphoreABI, functionName: 'addMembers', ...config } as UsePrepareContractWriteConfig<
    typeof iSemaphoreABI,
    'addMembers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"createGroup"`.
 */
export function usePrepareISemaphoreCreateGroup(
  config: Omit<UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'createGroup'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iSemaphoreABI, functionName: 'createGroup', ...config } as UsePrepareContractWriteConfig<
    typeof iSemaphoreABI,
    'createGroup'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"removeMember"`.
 */
export function usePrepareISemaphoreRemoveMember(
  config: Omit<UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'removeMember'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iSemaphoreABI, functionName: 'removeMember', ...config } as UsePrepareContractWriteConfig<
    typeof iSemaphoreABI,
    'removeMember'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"updateGroupAdmin"`.
 */
export function usePrepareISemaphoreUpdateGroupAdmin(
  config: Omit<UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'updateGroupAdmin'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iSemaphoreABI, functionName: 'updateGroupAdmin', ...config } as UsePrepareContractWriteConfig<
    typeof iSemaphoreABI,
    'updateGroupAdmin'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"updateGroupMerkleTreeDuration"`.
 */
export function usePrepareISemaphoreUpdateGroupMerkleTreeDuration(
  config: Omit<UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'updateGroupMerkleTreeDuration'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iSemaphoreABI, functionName: 'updateGroupMerkleTreeDuration', ...config } as UsePrepareContractWriteConfig<
    typeof iSemaphoreABI,
    'updateGroupMerkleTreeDuration'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"updateMember"`.
 */
export function usePrepareISemaphoreUpdateMember(
  config: Omit<UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'updateMember'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iSemaphoreABI, functionName: 'updateMember', ...config } as UsePrepareContractWriteConfig<
    typeof iSemaphoreABI,
    'updateMember'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"verifyProof"`.
 */
export function usePrepareISemaphoreVerifyProof(
  config: Omit<UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'verifyProof'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iSemaphoreABI, functionName: 'verifyProof', ...config } as UsePrepareContractWriteConfig<
    typeof iSemaphoreABI,
    'verifyProof'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreABI}__.
 */
export function useISemaphoreEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iSemaphoreABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: iSemaphoreABI, ...config } as UseContractEventConfig<typeof iSemaphoreABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreABI}__ and `eventName` set to `"GroupAdminUpdated"`.
 */
export function useISemaphoreGroupAdminUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof iSemaphoreABI, 'GroupAdminUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iSemaphoreABI, eventName: 'GroupAdminUpdated', ...config } as UseContractEventConfig<
    typeof iSemaphoreABI,
    'GroupAdminUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreABI}__ and `eventName` set to `"GroupMerkleTreeDurationUpdated"`.
 */
export function useISemaphoreGroupMerkleTreeDurationUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof iSemaphoreABI, 'GroupMerkleTreeDurationUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iSemaphoreABI, eventName: 'GroupMerkleTreeDurationUpdated', ...config } as UseContractEventConfig<
    typeof iSemaphoreABI,
    'GroupMerkleTreeDurationUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreABI}__ and `eventName` set to `"ProofVerified"`.
 */
export function useISemaphoreProofVerifiedEvent(
  config: Omit<UseContractEventConfig<typeof iSemaphoreABI, 'ProofVerified'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iSemaphoreABI, eventName: 'ProofVerified', ...config } as UseContractEventConfig<
    typeof iSemaphoreABI,
    'ProofVerified'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSemaphoreGroupsABI}__.
 */
export function useISemaphoreGroupsRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof iSemaphoreGroupsABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof iSemaphoreGroupsABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: iSemaphoreGroupsABI, ...config } as UseContractReadConfig<typeof iSemaphoreGroupsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSemaphoreGroupsABI}__ and `functionName` set to `"getMerkleTreeDepth"`.
 */
export function useISemaphoreGroupsGetMerkleTreeDepth<
  TFunctionName extends 'getMerkleTreeDepth',
  TSelectData = ReadContractResult<typeof iSemaphoreGroupsABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iSemaphoreGroupsABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: iSemaphoreGroupsABI, functionName: 'getMerkleTreeDepth', ...config } as UseContractReadConfig<
    typeof iSemaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSemaphoreGroupsABI}__ and `functionName` set to `"getMerkleTreeRoot"`.
 */
export function useISemaphoreGroupsGetMerkleTreeRoot<
  TFunctionName extends 'getMerkleTreeRoot',
  TSelectData = ReadContractResult<typeof iSemaphoreGroupsABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iSemaphoreGroupsABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: iSemaphoreGroupsABI, functionName: 'getMerkleTreeRoot', ...config } as UseContractReadConfig<
    typeof iSemaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSemaphoreGroupsABI}__ and `functionName` set to `"getNumberOfMerkleTreeLeaves"`.
 */
export function useISemaphoreGroupsGetNumberOfMerkleTreeLeaves<
  TFunctionName extends 'getNumberOfMerkleTreeLeaves',
  TSelectData = ReadContractResult<typeof iSemaphoreGroupsABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iSemaphoreGroupsABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: iSemaphoreGroupsABI, functionName: 'getNumberOfMerkleTreeLeaves', ...config } as UseContractReadConfig<
    typeof iSemaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreGroupsABI}__.
 */
export function useISemaphoreGroupsEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iSemaphoreGroupsABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: iSemaphoreGroupsABI, ...config } as UseContractEventConfig<typeof iSemaphoreGroupsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreGroupsABI}__ and `eventName` set to `"GroupCreated"`.
 */
export function useISemaphoreGroupsGroupCreatedEvent(
  config: Omit<UseContractEventConfig<typeof iSemaphoreGroupsABI, 'GroupCreated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iSemaphoreGroupsABI, eventName: 'GroupCreated', ...config } as UseContractEventConfig<
    typeof iSemaphoreGroupsABI,
    'GroupCreated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreGroupsABI}__ and `eventName` set to `"MemberAdded"`.
 */
export function useISemaphoreGroupsMemberAddedEvent(
  config: Omit<UseContractEventConfig<typeof iSemaphoreGroupsABI, 'MemberAdded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iSemaphoreGroupsABI, eventName: 'MemberAdded', ...config } as UseContractEventConfig<
    typeof iSemaphoreGroupsABI,
    'MemberAdded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreGroupsABI}__ and `eventName` set to `"MemberRemoved"`.
 */
export function useISemaphoreGroupsMemberRemovedEvent(
  config: Omit<UseContractEventConfig<typeof iSemaphoreGroupsABI, 'MemberRemoved'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iSemaphoreGroupsABI, eventName: 'MemberRemoved', ...config } as UseContractEventConfig<
    typeof iSemaphoreGroupsABI,
    'MemberRemoved'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreGroupsABI}__ and `eventName` set to `"MemberUpdated"`.
 */
export function useISemaphoreGroupsMemberUpdatedEvent(
  config: Omit<UseContractEventConfig<typeof iSemaphoreGroupsABI, 'MemberUpdated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iSemaphoreGroupsABI, eventName: 'MemberUpdated', ...config } as UseContractEventConfig<
    typeof iSemaphoreGroupsABI,
    'MemberUpdated'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSemaphoreVerifierABI}__.
 */
export function useISemaphoreVerifierRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iSemaphoreVerifierABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iSemaphoreVerifierABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iSemaphoreVerifierABI, ...config } as UseContractReadConfig<typeof iSemaphoreVerifierABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSemaphoreVerifierABI}__ and `functionName` set to `"verifyProof"`.
 */
export function useISemaphoreVerifierVerifyProof<
  TFunctionName extends 'verifyProof',
  TSelectData = ReadContractResult<typeof iSemaphoreVerifierABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iSemaphoreVerifierABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: iSemaphoreVerifierABI, functionName: 'verifyProof', ...config } as UseContractReadConfig<
    typeof iSemaphoreVerifierABI,
    TFunctionName,
    TSelectData
  >)
}
